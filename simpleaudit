<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Ads Audit Report Generator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .header h1 {
            color: white;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .header p {
            color: rgba(255, 255, 255, 0.8);
            font-size: 1.1rem;
        }
        
        .upload-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .file-upload {
            border: 2px dashed #667eea;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            background: #f8f9ff;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .file-upload:hover {
            border-color: #764ba2;
            background: #f0f2ff;
        }
        
        .file-upload.dragover {
            border-color: #4CAF50;
            background: #e8f5e8;
        }
        
        .upload-icon {
            font-size: 48px;
            color: #667eea;
            margin-bottom: 15px;
        }
        
        #fileInput {
            display: none;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }
        
        .report-section {
            display: none;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: linear-gradient(135deg, #f8f9ff, #fff);
            border: 1px solid #e0e4ff;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }
        
        .metric-label {
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        .campaign-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .campaign-table th {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .campaign-table td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
            font-size: 0.9rem;
        }
        
        .campaign-table tbody tr:hover {
            background: #f8f9ff;
        }
        
        .recommendations {
            background: linear-gradient(135deg, #fff3cd, #ffeeba);
            border: 1px solid #ffeaa7;
            border-radius: 12px;
            padding: 20px;
            margin-top: 30px;
        }
        
        .recommendations h3 {
            color: #856404;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .recommendations ul {
            list-style: none;
            padding-left: 0;
        }
        
        .recommendations li {
            background: white;
            margin: 8px 0;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #ffc107;
            color: #856404;
        }
        
        .status-enabled { color: #28a745; font-weight: bold; }
        .status-limited { color: #ffc107; font-weight: bold; }
        .status-paused { color: #dc3545; font-weight: bold; }
        
        @media (max-width: 768px) {
            .container { padding: 10px; }
            .header h1 { font-size: 2rem; }
            .metrics-grid { grid-template-columns: 1fr; }
            .report-header { flex-direction: column; gap: 15px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸš€ Google Ads Audit Report</h1>
            <p>Upload your Google Ads campaign report CSV to generate a comprehensive audit</p>
        </div>
        
        <div class="upload-section">
            <div class="file-upload" onclick="document.getElementById('fileInput').click()">
                <div class="upload-icon">ðŸ“Š</div>
                <h3>Drop your CSV file here or click to browse</h3>
                <p>Supports Google Ads campaign report CSV files</p>
                <input type="file" id="fileInput" accept=".csv" />
            </div>
        </div>
        
        <div class="report-section" id="reportSection">
            <div class="report-header">
                <div>
                    <h2>ðŸ“ˆ Campaign Audit Report</h2>
                    <p id="reportDate"></p>
                </div>
                <button class="btn" onclick="downloadReport()">ðŸ“¥ Download PDF</button>
            </div>
            
            <div class="metrics-grid" id="metricsGrid">
                <!-- Metrics will be populated here -->
            </div>
            
            <h3>ðŸ“‹ Campaign Details</h3>
            <div style="overflow-x: auto;">
                <table class="campaign-table" id="campaignTable">
                    <thead>
                        <tr>
                            <th>Campaign</th>
                            <th>Status</th>
                            <th>Budget</th>
                            <th>Impressions</th>
                            <th>Clicks</th>
                            <th>CTR</th>
                            <th>Cost</th>
                            <th>Conversions</th>
                            <th>Conv. Rate</th>
                            <th>CPC</th>
                        </tr>
                    </thead>
                    <tbody id="campaignTableBody">
                        <!-- Campaign data will be populated here -->
                    </tbody>
                </table>
            </div>
            
            <div class="recommendations" id="recommendations">
                <h3>ðŸ’¡ Recommendations</h3>
                <ul id="recommendationsList">
                    <!-- Recommendations will be populated here -->
                </ul>
            </div>
        </div>
    </div>

    <script>
        let campaignData = [];
        
        // File upload handling
        const fileInput = document.getElementById('fileInput');
        const fileUpload = document.querySelector('.file-upload');
        
        fileUpload.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUpload.classList.add('dragover');
        });
        
        fileUpload.addEventListener('dragleave', () => {
            fileUpload.classList.remove('dragover');
        });
        
        fileUpload.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUpload.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        });
        
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleFile(e.target.files[0]);
            }
        });
        
        function handleFile(file) {
            if (!file.name.toLowerCase().endsWith('.csv')) {
                alert('Please upload a CSV file.');
                return;
            }
            
            Papa.parse(file, {
                header: true,
                skipEmptyLines: true,
                dynamicTyping: true,
                delimitersToGuess: [',', '\t', '|', ';'],
                complete: function(results) {
                    console.log('Parsed data:', results.data);
                    processData(results.data);
                },
                error: function(error) {
                    console.error('Error parsing CSV:', error);
                    alert('Error parsing CSV file. Please check the format.');
                }
            });
        }
        
        function processData(data) {
            // Filter out total rows and empty campaigns
            campaignData = data.filter(row => 
                row.Campaign && 
                !row.Campaign.includes('Total:') && 
                row.Campaign.trim() !== '' &&
                row['Campaign status'] === 'Enabled'
            );
            
            console.log('Filtered campaign data:', campaignData);
            
            if (campaignData.length === 0) {
                alert('No valid campaign data found in the CSV file.');
                return;
            }
            
            generateReport();
        }
        
        function generateReport() {
            // Show report section
            document.getElementById('reportSection').style.display = 'block';
            document.getElementById('reportSection').scrollIntoView({ behavior: 'smooth' });
            
            // Set report date
            document.getElementById('reportDate').textContent = new Date().toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            // Calculate metrics
            const metrics = calculateMetrics();
            displayMetrics(metrics);
            
            // Display campaign table
            displayCampaignTable();
            
            // Generate recommendations
            generateRecommendations(metrics);
        }
        
        function calculateMetrics() {
            let totalImpressions = 0;
            let totalClicks = 0;
            let totalCost = 0;
            let totalConversions = 0;
            let totalConvValue = 0;
            
            campaignData.forEach(campaign => {
                totalImpressions += parseNumber(campaign['Impr.']);
                totalClicks += parseNumber(campaign['Clicks']);
                totalCost += parseNumber(campaign['Cost']);
                totalConversions += parseNumber(campaign['Conversions']);
                totalConvValue += parseNumber(campaign['Conv. value']);
            });
            
            return {
                totalImpressions,
                totalClicks,
                totalCost,
                totalConversions,
                totalConvValue,
                avgCTR: totalImpressions > 0 ? (totalClicks / totalImpressions * 100) : 0,
                avgCPC: totalClicks > 0 ? (totalCost / totalClicks) : 0,
                convRate: totalClicks > 0 ? (totalConversions / totalClicks * 100) : 0,
                roas: totalCost > 0 ? (totalConvValue / totalCost) : 0,
                costPerConversion: totalConversions > 0 ? (totalCost / totalConversions) : 0
            };
        }
        
        function parseNumber(value) {
            if (typeof value === 'number') return value;
            if (typeof value === 'string') {
                // Remove commas and convert to number
                const cleaned = value.replace(/[,%]/g, '');
                return parseFloat(cleaned) || 0;
            }
            return 0;
        }
        
        function displayMetrics(metrics) {
            const metricsGrid = document.getElementById('metricsGrid');
            metricsGrid.innerHTML = `
                <div class="metric-card">
                    <div class="metric-value">${metrics.totalImpressions.toLocaleString()}</div>
                    <div class="metric-label">Total Impressions</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${metrics.totalClicks.toLocaleString()}</div>
                    <div class="metric-label">Total Clicks</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${metrics.avgCTR.toFixed(2)}%</div>
                    <div class="metric-label">Average CTR</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">$${metrics.totalCost.toFixed(2)}</div>
                    <div class="metric-label">Total Cost</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">$${metrics.avgCPC.toFixed(2)}</div>
                    <div class="metric-label">Average CPC</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${metrics.totalConversions.toFixed(0)}</div>
                    <div class="metric-label">Total Conversions</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${metrics.convRate.toFixed(2)}%</div>
                    <div class="metric-label">Conversion Rate</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${metrics.roas.toFixed(2)}x</div>
                    <div class="metric-label">ROAS</div>
                </div>
            `;
        }
        
        function displayCampaignTable() {
            const tableBody = document.getElementById('campaignTableBody');
            tableBody.innerHTML = '';
            
            campaignData.forEach(campaign => {
                const row = document.createElement('tr');
                const impressions = parseNumber(campaign['Impr.']);
                const clicks = parseNumber(campaign['Clicks']);
                const ctr = impressions > 0 ? (clicks / impressions * 100) : 0;
                const conversions = parseNumber(campaign['Conversions']);
                const convRate = clicks > 0 ? (conversions / clicks * 100) : 0;
                
                row.innerHTML = `
                    <td>${campaign.Campaign || 'N/A'}</td>
                    <td><span class="status-enabled">${campaign['Campaign status'] || 'N/A'}</span></td>
                    <td>$${parseNumber(campaign.Budget).toFixed(2)}</td>
                    <td>${impressions.toLocaleString()}</td>
                    <td>${clicks.toLocaleString()}</td>
                    <td>${ctr.toFixed(2)}%</td>
                    <td>$${parseNumber(campaign.Cost).toFixed(2)}</td>
                    <td>${conversions.toFixed(1)}</td>
                    <td>${convRate.toFixed(2)}%</td>
                    <td>$${parseNumber(campaign['Avg. CPC']).toFixed(2)}</td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function generateRecommendations(metrics) {
            const recommendations = [];
            
            // CTR recommendations
            if (metrics.avgCTR < 2) {
                recommendations.push('Average CTR is below 2%. Consider improving ad copy and using more relevant keywords.');
            } else if (metrics.avgCTR > 5) {
                recommendations.push('Excellent CTR! Your ads are highly relevant to your target audience.');
            }
            
            // CPC recommendations
            if (metrics.avgCPC > 2) {
                recommendations.push('Average CPC is high. Consider refining your keyword targeting and improving Quality Score.');
            }
            
            // Conversion rate recommendations
            if (metrics.convRate < 1) {
                recommendations.push('Conversion rate is low. Review your landing page experience and ensure it matches ad intent.');
            } else if (metrics.convRate > 3) {
                recommendations.push('Great conversion rate! Your traffic is highly qualified.');
            }
            
            // ROAS recommendations
            if (metrics.roas < 2) {
                recommendations.push('ROAS is below 2x. Focus on higher-intent keywords and improve conversion funnel.');
            } else if (metrics.roas > 4) {
                recommendations.push('Excellent ROAS! Consider scaling successful campaigns.');
            }
            
            // Budget recommendations
            const limitedBudgetCampaigns = campaignData.filter(c => c.Status === 'Eligible (Limited)');
            if (limitedBudgetCampaigns.length > 0) {
                recommendations.push(`${limitedBudgetCampaigns.length} campaign(s) are limited by budget. Consider increasing budgets for better performance.`);
            }
            
            const recommendationsList = document.getElementById('recommendationsList');
            recommendationsList.innerHTML = '';
            
            if (recommendations.length === 0) {
                recommendations.push('Your campaigns are performing well overall. Continue monitoring and optimizing.');
            }
            
            recommendations.forEach(rec => {
                const li = document.createElement('li');
                li.textContent = rec;
                recommendationsList.appendChild(li);
            });
        }
        
        function downloadReport() {
            // Simple download functionality - in a real implementation, you'd generate a PDF
            const reportContent = document.getElementById('reportSection').innerHTML;
            const blob = new Blob([`
                <!DOCTYPE html>
                <html>
                <head><title>Google Ads Audit Report</title></head>
                <body style="font-family: Arial, sans-serif; padding: 20px;">
                    <h1>Google Ads Audit Report</h1>
                    ${reportContent}
                </body>
                </html>
            `], { type: 'text/html' });
            
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `google-ads-audit-${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
    </script>
</body>
</html>
